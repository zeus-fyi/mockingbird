openapi: 3.0.3
info:
  title: Mockingbird API
  version: "1.0.1"
servers:
  - url: https://api.zeus.fyi/v1
paths:
  /search:
    post:
      summary: Search Indexer Request
      description: "Executes an AI search with the specified parameters."
      operationId: aiSearchRequest
      tags:
        - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiSearchRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /actions/ai:
    get:
      summary: Read AI Actions
      description: "Retrieves a list of AI actions as `TriggerAction` entities."
      operationId: aiActionsReader
      tags:
        - Actions
      responses:
        '200':
          description: Successfully retrieved list of AI actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TriggerAction'
        '412':
          description: Precondition failed
        '400':
          description: Bad request
        '500':
          description: Internal server error
    post:
      summary: Create or Update Trigger Actions
      description: "Handles the creation or updating of triggered actions via the TriggerAction entity."
      operationId: aiActionsHandler
      tags:
        - Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAction'
      responses:
        '200':
          description: AI Action successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '412':
          description: Precondition failed
        '400':
          description: Bad request due to invalid input or missing request body
        '500':
          description: Internal server error
  /retrieval/ai/{id}:
    get:
      summary: Get Specific AI Retrieval Item
      description: "Retrieves a specific AI retrieval item by its unique identifier."
      operationId: getSpecificRetrievalItem
      tags:
        - Retrievals
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Unique identifier of the retrieval item
      responses:
        '200':
          description: Successfully retrieved the retrieval item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievalItem'
        '400':
          description: Bad request due to invalid input
        '404':
          description: Retrieval item not found
        '500':
          description: Internal server error
  /retrievals/ai:
    get:
      summary: Get Retrievals
      description: Retrieves retrieval items based on organization and user context.
      operationId: getRetrievals
      tags:
        - Retrievals
      responses:
        '200':
          description: Successfully retrieved retrieval items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrievalItem'
        '412':
          description: Precondition failed
        '400':
          description: Bad request due to invalid input
        '500':
          description: Internal server error
    post:
      summary: Create or Update AI Retrieval Items
      description: "Creates or updates a retrieval item for AI operations."
      operationId: createOrUpdateRetrievalRequest
      tags:
        - Retrievals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateRetrievalRequest'
      responses:
        '200':
          description: Retrieval item created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '412':
          description: Precondition failed
        '400':
          description: Bad request due to invalid input
        '500':
          description: Internal server error
  /eval/ai/{id}:
    get:
      summary: Get Specific Eval Function
      description: Retrieves a specific evaluation function by its unique identifier.
      operationId: getSpecificEvalFn
      tags:
        - Evals
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: Unique identifier of the evaluation function
      responses:
        '200':
          description: Successfully retrieved the evaluation function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalFn'
        '412':
          description: Precondition failed
        '400':
          description: Bad request due to invalid input
        '404':
          description: Evaluation function not found
        '500':
          description: Internal server error
  /evals/ai:
    get:
      summary: Get Eval Functions
      description: "Retrieves a list of evaluation functions (`EvalFn` entities)."
      operationId: getEvalsRequest
      tags:
        - Evals
      responses:
        '200':
          description: Successfully retrieved list of evaluation functions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EvalFn'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    post:
      summary: Create or Update Eval Functions
      description: "Creates or updates an evaluation function for AI operations."
      operationId: createOrUpdateEvals
      tags:
        - Evals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateEvalsRequest'
      responses:
        '200':
          description: Evaluation function created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '412':
          description: Precondition failed
        '400':
          description: Bad request due to invalid input
        '500':
          description: Internal server error
  /task/ai/{id}:
    get:
      summary: Get a Specific Task
      description: Retrieves a specific task by its unique identifier, provided the user has a billing method set up.
      operationId: getSpecificTask
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Unique identifier of the task
      responses:
        '200':
          description: Successfully retrieved the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITaskLibrary'
        '400':
          description: Bad request due to invalid input
        '412':
          description: Precondition Failed - User does not have a billing method set up
        '500':
          description: Internal server error
  /tasks/ai:
    get:
      summary: Get AI Tasks
      description: Retrieves an array of AI Tasks that have been created.
      operationId: getAITasks
      tags:
        - Tasks
      responses:
        '200':
          description: Successfully retrieved list of AI tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AITaskLibrary'
        '412':
          description: Precondition failed
        '400':
          description: Bad Request
        '500':
          description: Server Error
    post:
      summary: Create/Update AI Tasks
      description: "Create an AI Task to be used in a workflow. This will be used to
       generate a prompt for the AI model to generate a response."
      operationId: createOrUpdateAITask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AITaskLibrary'
      responses:
        '200':
          description: AI Task successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITaskLibrary'
        '412':
          description: Precondition failed
        '400':
          description: Bad Request
        '500':
          description: Server Error
  /schemas/ai:
    get:
      summary: Get JsonSchemaDefinitions
      operationId: getJsonSchemaDefinitions
      tags:
        - Schemas
      responses:
        '200':
          description: A list or map of JsonSchemaDefinitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemasGroup'
        '404':
          description: JsonSchemaDefinitions not found
        '500':
          description: Internal server error
    post:
      summary: Create/Update JsonSchemaDefinition
      operationId: createJsonSchemaDefinition
      tags:
        - Schemas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonSchemaDefinition'
      responses:
        '201':
          description: Successfully created JsonSchemaDefinition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemaDefinition'
        '412':
          description: Precondition failed
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /workflows/ai/actions:
    post:
      summary: Exec Workflow
      operationId: execWorkflow
      tags:
        - Workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowsActionsRequest'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
        '412':
          description: Precondition failed
        '500':
          description: Internal server error
  /run/ai/{id}:
    get:
      summary: Get Run by ID
      operationId: getRunById
      tags:
        - Runs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the run, which can be a string or an int64.
      responses:
        '200':
          description: Details of the run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationsAnalysis'
        '404':
          description: Run not found
        '412':
          description: Precondition failed
        '500':
          description: Internal server error
  /runs/ai:
    get:
      summary: Workflow Runs
      operationId: getAIRunsAnalyses
      tags:
        - Runs
      responses:
        '200':
          description: An array of orchestrations analyses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrchestrationsAnalysis'
  /workflows/ai:
    post:
      summary: Create Workflow Request
      description: "Submits a request to create or update a workflow, including task models, evaluations, and analyses. Returns run id if successful."
      operationId: postWorkflowsRequest
      tags:
        - Workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWorkflowsRequest'
      responses:
        '200':
          description: Workflow successfully created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
        '500':
          description: Server Error
  /search/entities/ai:
    post:
      summary: Search Entities
      operationId: searchEntities
      tags:
        - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitiesFilter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitiesFilter'
  /entity/ai:
    post:
      summary: Create or update an entity
      operationId: createOrUpdateEntity
      tags:
        - Entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitiesFilter'
      responses:
        '200':
          description: Entity created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesFilter'
        '400':
          description: Bad request
        '412':
          description: Precondition failed
        '500':
          description: Internal server error
  /entities/ai:
    post:
      summary: Create or update entities
      operationId: createOrUpdateEntities
      tags:
        - Entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntitiesFilter'
      responses:
        '200':
          description: Entities created or updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitiesFilter'
        '400':
          description: Bad request
        '412':
          description: Precondition failed
        '500':
          description: Internal server error
components:
  schemas:
    WorkflowsActionsRequest:
      type: object
      required:
        - action
        - workflows
      properties:
        action:
          type: string
          enum:
            - start
        unixStartTime:
          type: integer
        duration:
          type: integer
        durationUnit:
          type: string
          enum:
            - minutes
            - minute
            - hours
            - hour
            - hrs
            - hr
            - days
            - day
            - weeks
            - week
            - cycles
        isStrictTimeWindow:
          type: boolean
          description: "If true, it will sleep over the time-series window, even if the time start relative deadline has passed. Useful for historical data that needs time delays"
        customBasePeriod:
          type: boolean
        customBasePeriodStepSize:
          type: integer
        customBasePeriodStepSizeUnit:
          type: string
        workflows:
          type: array
          items:
            type: string
    TaskOverride:
      type: object
      description: Used to override task parameters, use the task name as the key.
      properties:
        replacePrompt:
          type: string
    EntitiesFilter:
      type: object
      properties:
        nickname:
          type: string
          nullable: true
        platform:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        labels:
          type: array
          items:
            type: string
          nullable: true
        metadataJsonb:
          type: string
          format: byte
          nullable: true
        metadataText:
          type: string
          nullable: true
        sinceUnixTimestamp:
          type: integer
          format: int64
          nullable: true
    UserEntity:
      type: object
      properties:
        nickname:
          type: string
        platform:
          type: string
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/UserEntityMetadata'
      required:
        - nickname
        - platform
    UserEntityMetadata:
      type: object
      properties:
        jsonData:
          type: string
          format: byte
          nullable: true
        textData:
          type: string
          nullable: true
        labels:
          type: array
          items:
            type: string
    CreateOrUpdateRetrievalRequest:
      type: object
      properties:
        RetrievalItem:
          $ref: '#/components/schemas/RetrievalItem'
    CreateOrUpdateEvalsRequest:
      type: object
      properties:
        EvalFn:
          $ref: '#/components/schemas/EvalFn'
    OrchestrationsAnalysis:
      type: object
      properties:
        totalWorkflowTokenUsage:
          type: integer
        runCycles:
          type: integer
        aggregatedData:
          type: array
          items:
            $ref: '#/components/schemas/AggregatedData'
        aggregatedEvalResults:
          type: array
          items:
            $ref: '#/components/schemas/EvalMetric'
        orchestration:
          $ref: '#/components/schemas/Orchestrations'
    Orchestrations:
      type: object
      properties:
        orchestrationStrID:
          type: string
        orchestrationID:
          type: integer
        active:
          type: boolean
        groupName:
          type: string
        type:
          type: string
        instructions:
          type: string
        orchestrationName:
          type: string
    AggregatedData:
      type: object
      properties:
        workflowResultID:
          type: integer
        orchestrationID:
          type: integer
        responseID:
          type: integer
        sourceTaskID:
          type: integer
        iterationCount:
          type: integer
        chunkOffset:
          type: integer
        runningCycleNumber:
          type: integer
        searchWindowUnixStart:
          type: integer
        searchWindowUnixEnd:
          type: integer
        skipAnalysis:
          type: boolean
        metadata:
          type: string
          format: byte
        completionChoices:
          type: string
          format: byte
        taskName:
          type: string
        taskType:
          type: string
        model:
          type: string
        prompt:
          type: string
          format: byte
        promptTokens:
          type: integer
        completionTokens:
          type: integer
        totalTokens:
          type: integer
    EvalMetric:
      type: object
      properties:
        evalMetricStrID:
          type: string
          nullable: true
        evalMetricID:
          type: integer
          nullable: true
        evalField:
          $ref: '#/components/schemas/JsonSchemaField'
        evalName:
          type: string
          nullable: true
        evalMetricResult:
          $ref: '#/components/schemas/EvalMetricResult'
        evalOperator:
          type: string
        evalState:
          type: string
        evalExpectedResultState:
          type: string
        evalMetricComparisonValues:
          $ref: '#/components/schemas/EvalMetricComparisonValues'
    EvalMetricComparisonValues:
      type: object
      properties:
        evalComparisonBoolean:
          type: boolean
          nullable: true
        evalComparisonNumber:
          type: number
          format: double
          nullable: true
        evalComparisonString:
          type: string
          nullable: true
        evalComparisonInteger:
          type: integer
          nullable: true
    JsonSchemaField:
      type: object
      required:
        - fieldName
        - fieldDescription
        - dataType
        - fieldValue
      properties:
        fieldID:
          type: integer
        fieldStrID:
          type: string
          nullable: true
        fieldName:
          type: string
        fieldDescription:
          type: string
        dataType:
          type: string
          enum:
            - string
            - integer
            - number
            - boolean
            - array[number]
            - array[integer]
            - array[string]
            - array[boolean]
        fieldValue:
          $ref: '#/components/schemas/FieldValue'
        evalMetrics:
          type: array
          items:
            $ref: '#/components/schemas/EvalMetric'
    FieldValue:
      type: object
      properties:
        integerValue:
          type: integer
          nullable: true
        stringValue:
          type: string
          nullable: true
        numberValue:
          type: number
          format: double
          nullable: true
        booleanValue:
          type: boolean
          nullable: true
        integerValueSlice:
          type: array
          items:
            type: integer
        stringValueSlice:
          type: array
          items:
            type: string
        numberValueSlice:
          type: array
          items:
            type: number
            format: double
        booleanValueSlice:
          type: array
          items:
            type: boolean
        isValidated:
          type: boolean
    JsonSchemaDefinition:
      type: object
      required:
        - schemaName
        - schemaGroup
        - schemaDescription
        - isObjArray
      properties:
        schemaID:
          type: integer
        schemaStrID:
          type: string
        schemaName:
          type: string
        schemaGroup:
          type: string
        schemaDescription:
          type: string
        isObjArray:
          type: boolean
        fields:
          type: array
          items:
            $ref: '#/components/schemas/JsonSchemaField'
    EvalMetricResult:
      type: object
      properties:
        evalMetricsResultStrID:
          type: string
          nullable: true
        evalMetricsResultID:
          type: integer
          nullable: true
        evalResultOutcomeBool:
          type: boolean
          nullable: true
        evalResultOutcomeStateStr:
          type: string
          nullable: true
        runningCycleNumber:
          type: integer
          nullable: true
        evalIterationCount:
          type: integer
          nullable: true
        searchWindowUnixStart:
          type: integer
          nullable: true
        searchWindowUnixEnd:
          type: integer
          nullable: true
        evalMetadata:
          type: string
          format: byte
          nullable: true
    AITaskLibrary:
      type: object
      required:
        - taskName
        - taskGroup
        - taskType
        - model
        - responseFormat
      properties:
        taskStrID:
          type: string
        taskID:
          type: integer
        maxTokensPerTask:
          type: integer
        taskType:
          type: string
        taskName:
          type: string
        taskGroup:
          type: string
        tokenOverflowStrategy:
          type: string
          enum:
            - deduce
            - truncate
        model:
          type: string
          enum:
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-1106
            - gpt-4-32k
            - gpt-4-32k-0613
            - gpt-4-0613
            - gpt-4-1106-preview
            - gpt-4-0125-preview
        temperature:
          type: number
          minimum: 0
          maximum: 2
        marginBuffer:
          type: number
          minimum: 0.2
          maximum: 0.8
        prompt:
          type: string
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/JsonSchemaDefinition'
        responseFormat:
          type: string
          enum:
            - json
            - text
    JsonSchemasGroup:
      type: object
      properties:
        jsonSchemaDefinitionsSlice:
          type: array
          items:
            $ref: '#/components/schemas/JsonSchemaDefinition'
        jsonSchemaDefinitionsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonSchemaDefinition'
    EvalFn:
      type: object
      properties:
        evalStrID:
          type: string
          nullable: true
        evalID:
          type: integer
          nullable: true
        evalName:
          type: string
        evalType:
          type: string
        evalGroupName:
          type: string
        evalModel:
          type: string
          nullable: true
        evalFormat:
          type: string
        evalCycleCount:
          type: integer
          nullable: true
        triggerActions:
          type: array
          items:
            $ref: '#/components/schemas/TriggerAction'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/JsonSchemaDefinition'
        schemasMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonSchemaDefinition'
    TriggerAction:
      type: object
      properties:
        triggerStrID:
          type: string
          nullable: true
        triggerID:
          type: integer
          nullable: true
        triggerName:
          type: string
        triggerGroup:
          type: string
        triggerAction:
          type: string
        triggerExpirationDuration:
          type: number
          format: double
          nullable: true
        triggerExpirationTimeUnit:
          type: string
          nullable: true
        triggerRetrievals:
          type: array
          items:
            $ref: '#/components/schemas/RetrievalItem'
        evalTriggerAction:
          $ref: '#/components/schemas/EvalTriggerActions'
        evalTriggerActions:
          type: array
          items:
            $ref: '#/components/schemas/EvalTriggerActions'
        triggerActionsApprovals:
          type: array
          items:
            $ref: '#/components/schemas/TriggerActionsApproval'
    RetrievalItemInstruction:
      type: object
      properties:
        retrievalPlatform:
          type: string
        retrievalPrompt:
          type: string
          nullable: true
        retrievalPlatformGroups:
          type: string
          nullable: true
        retrievalKeywords:
          type: string
          nullable: true
        retrievalNegativeKeywords:
          type: string
          nullable: true
        retrievalUsernames:
          type: string
          nullable: true
        discordFilters:
          $ref: '#/components/schemas/DiscordFilters'
        webFilters:
          $ref: '#/components/schemas/WebFilters'
        instructions:
          type: string
          format: binary
          nullable: true
    RetrievalItem:
      type: object
      properties:
        retrievalStrID:
          type: string
          nullable: true
        retrievalID:
          type: integer
          nullable: true
        retrievalName:
          type: string
        retrievalGroup:
          type: string
        retrievalItemInstruction:
          $ref: '#/components/schemas/RetrievalItemInstruction'
    WebFilters:
      type: object
      properties:
        routingGroup:
          type: string
          nullable: true
        lbStrategy:
          type: string
          nullable: true
        maxRetries:
          type: integer
          nullable: true
        backoffCoefficient:
          type: number
          format: double
          nullable: true
        endpointRoutePath:
          type: string
          nullable: true
        headers:
          type: object
          nullable: true
          additionalProperties:
            type: string
        endpointREST:
          type: string
          enum:
            - get
            - put
            - post
            - post-form
            - delete
          nullable: true
        payloadPreProcessing:
          type: string
          enum:
            - iterate
            - iterate-qp-only
            - bulk
          nullable: true
        regexPatterns:
          type: array
          items:
            type: string
        payloadKeys:
          type: array
          items:
            type: string
        dontRetryStatusCodes:
          type: array
          items:
            type: integer
            minimum: 400
            maximum: 599
          nullable: true
    DiscordFilters:
      type: object
      properties:
        categoryTopic:
          type: string
          nullable: true
        categoryName:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
    TriggerActionsApproval:
      type: object
      properties:
        triggerAction:
          type: string
        approvalStrID:
          type: string
          nullable: true
        approvalID:
          type: integer
        evalID:
          type: integer
        evalStrID:
          type: string
        triggerID:
          type: integer
        triggerStrID:
          type: string
        workflowResultID:
          type: integer
        workflowResultStrID:
          type: string
        approvalState:
          type: string
        requestSummary:
          type: string
        updatedAt:
          type: string
          format: date-time
        requests:
          type: string
          format: binary
        responses:
          type: string
          format: binary
    EvalTriggerActions:
      type: object
      properties:
        evalID:
          type: integer
          nullable: true
        evalStrID:
          type: string
          nullable: true
        triggerID:
          type: integer
          nullable: true
        triggerStrID:
          type: string
          nullable: true
        evalTriggerState:
          type: string
        evalResultsTriggerOn:
          type: string
    TaskModelInstructions:
      type: object
      required:
        - taskStrID
        - taskID
        - model
        - taskType
        - taskGroup
        - taskName
        - maxTokens
        - tokenOverflowStrategy
        - prompt
        - cycleCount
      properties:
        taskStrID:
          type: string
        taskID:
          type: integer
        model:
          type: string
        taskType:
          type: string
        temperature:
          type: number
          format: double
          nullable: true
        marginBuffer:
          type: number
          format: double
          nullable: true
        taskGroup:
          type: string
        taskName:
          type: string
        maxTokens:
          type: integer
        tokenOverflowStrategy:
          type: string
        prompt:
          type: string
        cycleCount:
          type: integer
        evalFns:
          type: array
          items:
            $ref: '#/components/schemas/EvalFn'
    PostWorkflowsRequest:
      type: object
      required:
        - workflowName
        - workflowGroupName
        - stepSize
        - stepSizeUnit
        - models
        - analysisRetrievalsMap
      properties:
        workflowName:
          type: string
        workflowGroupName:
          type: string
        stepSize:
          type: integer
        stepSizeUnit:
          type: string
        models:
          $ref: '#/components/schemas/TaskMap'
        evalsMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EvalFn'
        evalTasksMap:
          $ref: '#/components/schemas/TaskEvalsMap'
        aggregateSubTasksMap:
          $ref: '#/components/schemas/AggregateSubTasksMap'
        analysisRetrievalsMap:
          $ref: '#/components/schemas/AnalysisRetrievalsMap'
        taskMap:
          $ref: '#/components/schemas/TaskMap'
    TaskMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TaskModelInstructions'
    TaskEvalsMap:
      description: |
        A map where each key (referred to as `taskStrID`) represents the string identifier of a task, mapping to another map. The second-level map uses keys (referred to as `evalFnStrID`) representing the string identifiers of evaluation functions. The boolean value associated with each `evalFnStrID` indicates whether there is a relationship between the task and the evaluation function (`true` means such a relationship exists).
      type: object
      additionalProperties:
        description: |
          A nested map where each key (`evalFnStrID`) is the string identifier of an evaluation function. The boolean value indicates whether a relationship with the task (identified by `taskStrID`) should be established.
        type: object
        additionalProperties:
          type: boolean
    AnalysisRetrievalsMap:
      type: object
      description: "Maps analysis task IDs to a map of retrieval IDs and a boolean indicating whether to add the relationship. A value of true for the boolean indicates that the relationship should be added."
      additionalProperties:
        type: object
        description: "A map where each key is a retrieval entity ID and the boolean value indicates whether the relationship with the analysis entity ID should be added."
        additionalProperties:
          type: boolean
    AggregateSubTasksMap:
      description: |
        A map where each key (referred to as `taskStrID` for aggregation) represents the string identifier of an aggregation task, mapping to another map. The second-level map uses keys (referred to as `taskStrID` for analysis) representing the string identifiers of analysis tasks. The boolean value associated with each analysis `taskStrID` indicates whether there is a relationship between the aggregation task and the analysis task (`true` means such a relationship exists).
      type: object
      additionalProperties:
        description: |
          A nested map where each key (`taskStrID` for analysis) is the string identifier of an analysis task. The boolean value indicates whether a relationship with the aggregation task (identified by `taskStrID` for aggregation) should be established.
        type: object
        additionalProperties:
          type: boolean
    AiSearchParams:
      type: object
      properties:
        retrieval:
          $ref: '#/components/schemas/RetrievalItem'
        timeRange:
          type: string
          nullable: true
        window:
          $ref: '#/components/schemas/Window'
      description: "Search parameters for AI, including retrieval item, time range, and window of operation."
    Window:
      type: object
      properties:
        start:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
        unixStartTime:
          type: integer
          format: int64
          nullable: true
        unixEndTime:
          type: integer
          format: int64
          nullable: true
      description: "Defines a time window for operations, including both conventional and Unix time representations."
    AiSearchRequest:
      type: object
      properties:
        searchParams:
          $ref: '#/components/schemas/AiSearchParams'